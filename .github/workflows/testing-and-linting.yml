name: Testing and linting

on: push

jobs:
  testing-and-linting:
    name: Testing and linting
    runs-on: ubuntu-latest

    permissions: read-all

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - id: get-changes
        uses: ./
        with:
          filters: |
            md: .md
            yml: .yaml|.yml
            sh: .sh

      - name: Check get-changes outputs
        run: |
          echo "any ${{ steps.get-changes.outputs.has_any_changes }}"
          echo "changes ${{ steps.get-changes.outputs.changes }}"
          
          echo "md  ${{ steps.get-changes.outputs.md }}"
          echo "md  ${{ steps.get-changes.outputs.md_files }}"
          echo "md ${{ steps.get-changes.outputs.md_count }}"
          
          echo "yml ${{ steps.get-changes.outputs.yml }}"
          echo "yml ${{ steps.get-changes.outputs.yml_files }}"
          echo "yml ${{ steps.get-changes.outputs.yml_count }}"
          
          echo "sh  ${{ steps.get-changes.outputs.sh }}"
          echo "sh  ${{ steps.get-changes.outputs.sh_files }}"
          echo "sh ${{ steps.get-changes.outputs.sh_count }}"
          
          echo "no  ${{ steps.get-changes.outputs.missing }}"
          echo "no  ${{ steps.get-changes.outputs.missing_files }}"
          echo "no ${{ steps.get-changes.outputs.missing_count }}"

      - id: tests
        run: bash tests/tests.sh

      - id: cache-pip
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      - if: ${{ steps.cache-pip.outputs.cache-hit != 'true' }}
        name: Install yamllint
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install yamllint

      - name: Run yamllint
        shell: bash
        run: yamllint .

      - id: cache-shellcheck
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: shellcheck
          key: shellcheck-stable-${{ runner.os }}
          restore-keys: shellcheck-stable-${{ runner.os }}

      - if: ${{ steps.cache-shellcheck.outputs.cache-hit != 'true' }}
        name: Download shellcheck
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            osvariant="darwin"
          else
            osvariant="linux"
          fi
          baseurl="https://github.com/koalaman/shellcheck/releases/download"
          curl -Lso "sc.tar.xz" \
            "${baseurl}/stable/shellcheck-stable.${osvariant}.x86_64.tar.xz"

          tar -xf "sc.tar.xz"

          mv "shellcheck-stable/shellcheck" "shellcheck"

      - name: Run ShellCheck
        shell: bash
        run: |
          echo "Running shellcheck"
          for file in $(find **/*.sh -type f); do
            echo "- $file"
            ./shellcheck $file;
          done;
