name: Detect changes
description: This action detects relevant changes in repo.

inputs:
  base:
    description: Base commit for diff.
    default: origin/main
  commit:
    description: Commit to compare with base.
    default: HEAD
  fetch-depth:
    description: Number of commits to fetch. 0 indicates all history for all branches and tags.
    default: '0'
  filters:
    description: Paths to relevant files
    required: true
  #match-format:
  #  description: How should the changes list be formatted?
  #  default: 'none'

runs:
  using: 'composite'
  steps:
    - name: Detect changes
      run: |
        
        # The following command makes this bash script slightly more safe. It does the following things:
        # If any command fails the whole script will exit.
        # If any variable is not set it is treated as an error, and the script immediately exits.
        # Disable filename expansion (globbing) upon seeing *, ?, etc..
        # If any part of a pipeline fails the whole pipeline fails.
        set -euf -o pipefail
                
        echo "has_any_changes='false'" >> "$GITHUB_OUTPUT"
        
        readarray -t filter_array -- <<< "${{ inputs.filters }}" 
        
        diff=$(git diff --name-only "${{ inputs.base }}".."${{ inputs.commit }}")
        
        changes=()
        for row in "${filter_array[@]}"; do
          
          # xargs echo removes leading and trailing whitespaces from row
          row_trimmed=$(echo "$row" | xargs -- echo)
          
          # Check if the row is empty or not.
          if (( ${#row_trimmed} )); then
            
            # If there is a row, split it into two parts on ':'
            IFS=":" read -r filter_key filter_regex <<< "${row}"
            
            # Remove whitespace from key and regex
            key_trimmed=$(echo "$filter_key" | xargs -- echo)
            regex_trimmed=$(echo "$filter_regex" | xargs -- echo)
        
            # Skip this row if key or regex is empty
            if (( !${#key_trimmed} || !${#regex_trimmed} )); then
              continue
            fi
            
            # The '|| true' suffix suppresses 'set -e' for this line. Otherwise we would exit the script
            # if there were no results found
            results=$(echo "$diff" | grep -E "$regex_trimmed" --) || true
            
            readarray -t result_array <<< "$results"
            results_json=$(jq -ncR '[inputs]' <<< "${results}")
        
            if (( ${#result_array} )); then
        
              echo "has_any_changes=true" >> "$GITHUB_OUTPUT"
              echo "${filter_key}=true" >> "$GITHUB_OUTPUT"
              echo "${filter_key}_files=${results_json}" >> "$GITHUB_OUTPUT"
              echo "${filter_key}_count=${#result_array[@]}" >> "$GITHUB_OUTPUT"
        
              changes+=("${filter_key}")
            fi
          fi
        done
        
        changes_json=$(jq -cnR '$ARGS.positional' --args -- "${changes[@]}")
        echo 'changes="${changes_json}"' >> "$GITHUB_OUTPUT"

      id: changes
      shell: bash
